spring.application.name=Demo Project
spring.banner.location=classpath:/META-INF/banner.txt

## For Server
server.port = ${PORT:8080}
spring.profiles.active=${ACTIVE_PROFILE:dev}
spring.mvc.format.date-time=yyyy-MM-dd HH:mm:ss
server.error.include-stacktrace=never
server.tomcat.max-threads=300
server.tomcat.min-spare-threads=50
server.http2.enabled=true
server.compression.enabled=true
server.compression.mime-types=application/json
server.compression.min-response-size=1024

# Jackson
spring.jackson.property-naming-strategy=SNAKE_CASE
spring.jackson.serialization.write-dates-as-timestamps=false

## Data Source
# primary
spring.datasource-demo.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource-demo.jdbc-url=jdbc:mysql://${DB_HOST:127.0.0.1}:${DB_PORT:3306}/${DATABASE:demo}
spring.datasource-demo.username=${DB_USERNAME:root}
spring.datasource-demo.password=${DB_PASSWORD:123}
spring.datasource-demo.minimum-idle=${DB_MIN_POOL_SIZE:1}
spring.datasource-demo.maximum-pool-size=${DB_MAX_POOL_SIZE:10}
spring.datasource-demo.idle-timeout=${DB_RO_IDLE_TIMEOUT:1200000}
spring.datasource-demo.connection-timeout=${DB_CONNECTION_TIMEOUT:10000}
spring.datasource-demo.max-lifetime=${DB_MAX_LIFETIME:3600000}
spring.datasource-demo.pool-name=${DB_POOL_NAME:Demo-HikariPool}

# read only
spring.datasource-demo-ro.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource-demo-ro.jdbc-url=jdbc:mysql://${DB_RO_HOST:127.0.0.1}:${DB_RO_PORT:3306}/${RO_DATABASE:demo}
spring.datasource-demo-ro.username=${DB_RO_USERNAME:root}
spring.datasource-demo-ro.password=${DB_RO_PASSWORD:123}
spring.datasource-demo-ro.minimum-idle=${DB_RO_MIN_POOL_SIZE:1}
spring.datasource-demo-ro.maximum-pool-size=${DB_RO_MAX_POOL_SIZE:10}
spring.datasource-demo-ro.idle-timeout=${DB_RO_IDLE_TIMEOUT:1200000}
spring.datasource-demo-ro.connection-timeout=${DB_RO_CONNECTION_TIMEOUT:10000}
spring.datasource-demo-ro.max-lifetime=${DB_RO_MAX_LIFETIME:3600000}
spring.datasource-demo-ro.pool-name=${DB_RO_POOL_NAME:Demo-RO-HikariPool}

#MongoDB
spring.data.mongodb.uri=${DEMO_MONGO_URI:mongodb://root:root@localhost:27017/demo?authSource=admin}

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.generate-ddl=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.jdbc.batch_size=5

# Batch update for multiple tables in one transaction
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true

# Batch insert for multiple tables in one transaction
spring.jpa.properties.hibernate.order_inserts=true

# Generate statistics (Ex: check whether batch works)
spring.jpa.properties.hibernate.generate_statistics=false

spring.cache.type=redis
spring.data.redis.database=${REDIS_DATABASE:10}
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
#spring.redis.sentinel.nodes=${REDIS_SENTINEL_NODES:host1:port,host2:port,host3:port}
#spring.redis.sentinel.master=${REDIS_MASTER_NAME:your-redis-master-name}
#spring.redis.password=${REDIS_PASSWORD:123}

verified_tokens=${VERIFIED_TOKENS:39489c18-7b74-11ec-90d6-0242ac120003,426e274a-7b74-11ec-90d6-0242ac120003}

## Sentry
# NOTE: Replace the example DSN below with YOUR OWN DSN
sentry.dsn=${SENTRY_DSN:https://examplePublicKey@sentry.io/0}
sentry.environment=${SENTRY_ENV:dev}
sentry.enabled=${SENTRY_ENABLED:true}
# add request_id for tracing
sentry.mdc-tags=request_id
sentry.exception-resolver-order=-2147483647
# data that is naturally sensitive is not sent by default
sentry.send-default-pii=false
sentry.logging.enabled=true

retry.maxAttempts = ${MAX_ATTEMPTS_RETRY:3}
retry.backOffDelay = ${BACK_OFF_DELAY:50}

## Feign Client
# To enable logging, we need to set Spring Boot logging level to DEBUG for
# the class/package that contains our feign client
logging.level.com.example=${LOG_LEVEL:DEBUG}
# set the logging level for feign client. Notice that the above config was just to enable the logging.
feign.client.config.default.logger-level=${FEIGN_LOG_LEVEL:FULL}
feign.client.config.default.connect-timeout=${FEIGN_CONNECTION_TIMEOUT:5000}
feign.client.config.default.read-timeout=${FEIGN_READ_TIMEOUT:10000}

# Json placeholder client
jsonplaceholder-api-host=https://jsonplaceholder.typicode.com/
jsonplaceholder-api-path=posts
jsonplaceholder-api-token-header=apikey
jsonplaceholder-api-key=4V21NcmI0GHZ2xmdU4xbMDF3MjliTUZZZVdEZF


# jwt authentication
com.example.demo.jwtSecret=${DEMO_JWT_SECRET:HJDUFdOMmo4V21NcmI0GHZ2xmdU4xbMDF3MjliTUZZZVdEZFpzZ3U0Yke==}
com.example.demo.jwtExpirationMs=${DEMO_EXPIRATION_MS:86400000}


spring.main.web-application-type=${WEB_APPLICATION_TYPE:servlet}
management.endpoints.web.exposure.include=prometheus,health,info,metric
# WARN: Only disable if no Mail Server and ElasticSearch on local
management.health.elasticsearch.enabled=false
management.health.mail.enabled=false

springdoc.swagger-ui.defaultModelsExpandDepth=-1

# Kafka config
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
kafka.consumer.config.group-id=${KAFKA_CONSUMER_CONFIG_GROUP_ID:demo_group_id}
kafka.consumer.messages.topic=${KAFKA_MESSAGE_TOPIC:dev-demo-topic}
kafka.consumer.messages.concurrency=${KAFKA_MESSAGE_CONCURRENCY:3}
kafka.backoff.interval=${KAFKA_BACKOFF_INTERVAL:200}
kafka.backoff.max_failure=${KAFKA_BACKOFF_MAX_FAILURE:3}

# Email
spring.mail.host=${MAIL_HOST:demo_mail_host.com}
spring.mail.port=${MAIL_PORT:25}
spring.mail.username=${MAIL_USERNAME:hieuDepZai}
spring.mail.password=${MAIL_PASSWORD:12345}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.starttls.enable=true

## Scheduler
# enable/disable our scheduling jobs by this property
com.example.demo.scheduling.enabled=true
# set scheduling pool size (default = 1)
spring.task.scheduling.pool.size=5
demo.job.scan.failure.order=0 0 18 * * *

# Background Jobs
demo.email.daily-failure-order-report.template=templates/failure_order_report_template.html
demo.email.daily-failure-order-report.subject=Demo Subject Report
demo.email.daily-failure-order-report.from-address=hieupham@gmail.com
demo.email.daily-failure-order-report.to-address=phamduyhieuit@gmail.com
demo.email.daily-failure-order-report.cc-addresses=hieudepzai@gmail.com,hieudepzai2@gmail.com

# ActiveMQ
spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=admin
spring.activemq.password=admin
spring.activemq.packages.trusted=java.time,java.lang,com.example.demo.infrastructure.msg_queue

# Rate Limit
bucket4j.enabled=true
bucket4j.filters[0].cache-name=rate-limit-buckets
bucket4j.filters[0].strategy=first
bucket4j.filters[0].filter-order=50
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].http-response-body={ "message": "Too many requests" }
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=${RATE_LIMIT_CAPACITY:200}
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=minutes
bucket4j.filters[0].rate-limits[0].execute-condition=@Authenticator.getUserId() >= 0
bucket4j.filters[0].rate-limits[0].expression=@Authenticator.getUserId()

# ElasticSearch
spring.elasticsearch.host=localhost
spring.elasticsearch.port=9200
spring.elasticsearch.connection-timeout=3s
spring.elasticsearch.socket-timeout=30s